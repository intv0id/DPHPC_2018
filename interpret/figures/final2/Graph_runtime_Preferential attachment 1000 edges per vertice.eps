%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.68.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 921 315
%%HiResBoundingBox: 0 0 921 315
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_9_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-665 -325 2028 1037] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 41 dict def
CharProcs begin
/L {
556 0 73 0 521 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
7300 0 m
7300 71600 l
16800 71600 l
16800 8400 l
52100 8400 l
52100 0 l
7300 0 l
f*
Q
} def
/S {
667 0 45 -11 615 728 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
4500 23000 m
13400 23800 l
13800 20200 14800 17200 16400 14900 c
17900 12600 20300 10800 23600 9400 c
26800 8000 30500 7300 34600 7300 c
38200 7300 41300 7800 44100 8900 c
46900 9900 48900 11400 50300 13300 c
51600 15100 52300 17200 52300 19400 c
52300 21600 51600 23600 50300 25300 c
49000 26900 46900 28300 43900 29500 c
42000 30300 37800 31400 31200 33000 c
24600 34600 20000 36100 17400 37500 c
14000 39300 11400 41500 9700 44100 c
8000 46700 7200 49700 7200 53100 c
7200 56700 8200 60000 10300 63200 c
12300 66300 15300 68700 19300 70300 c
23200 71900 27600 72800 32400 72800 c
37700 72800 42400 71900 46400 70200 c
50400 68500 53600 66000 55800 62700 c
58000 59300 59100 55600 59300 51400 c
50200 50700 l
49700 55200 48100 58600 45300 61000 c
42500 63300 38300 64500 32800 64500 c
27000 64500 22900 63400 20300 61300 c
17700 59200 16400 56700 16400 53700 c
16400 51100 17300 49000 19100 47400 c
20900 45700 25700 44000 33400 42200 c
41100 40400 46400 38900 49300 37700 c
53400 35700 56500 33300 58500 30400 c
60500 27400 61500 24000 61500 20200 c
61500 16400 60400 12800 58200 9400 c
56000 6000 52800 3400 48800 1600 c
44700 -200 40100 -1100 35000 -1100 c
28500 -1100 23100 -200 18700 1600 c
14300 3400 10900 6300 8400 10100 c
5900 13900 4600 18200 4500 23000 c
f*
Q
} def
/k {
500 0 66 0 496 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 0 m
6600 71600 l
15400 71600 l
15400 30800 l
36200 51900 l
47600 51900 l
27800 32600 l
49600 0 l
38800 0 l
21600 26500 l
15400 20600 l
15400 0 l
6600 0 l
f*
Q
} def
/u {
556 0 64 -11 484 519 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
40600 0 m
40600 7600 l
36500 1800 31000 -1100 24100 -1100 c
21000 -1100 18100 -500 15500 600 c
12900 1700 10900 3200 9600 5000 c
8300 6800 7400 8900 6900 11500 c
6500 13200 6400 15900 6400 19700 c
6400 51900 l
15200 51900 l
15200 23100 l
15200 18500 15300 15400 15700 13800 c
16300 11500 17400 9700 19200 8400 c
21000 7000 23200 6400 25900 6400 c
28500 6400 30900 7000 33300 8400 c
35600 9700 37200 11500 38200 13900 c
39100 16200 39600 19600 39600 24100 c
39600 51900 l
48400 51900 l
48400 0 l
40600 0 l
f*
Q
} def
/K {
667 0 73 0 665 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
7300 0 m
7300 71600 l
16800 71600 l
16800 36100 l
52300 71600 l
65200 71600 l
35200 42600 l
66500 0 l
54000 0 l
28500 36200 l
16800 24800 l
16800 0 l
7300 0 l
f*
Q
} def
/F {
611 0 82 0 565 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
8200 0 m
8200 71600 l
56500 71600 l
56500 63100 l
17700 63100 l
17700 41000 l
51300 41000 l
51300 32500 l
17700 32500 l
17700 0 l
8200 0 l
f*
Q
} def
/A {
667 0 0 0 668 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
0 0 m
27300 71600 l
37500 71600 l
66800 0 l
56100 0 l
47700 21700 l
17800 21700 l
9900 0 l
0 0 l
20500 29400 m
44800 29400 l
37300 49200 l
35000 55200 33300 60200 32200 64100 c
31300 59500 30000 54900 28400 50400 c
20500 29400 l
f*
Q
} def
/o {
556 0 33 -11 519 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
3300 25900 m
3300 35500 5900 42600 11300 47300 c
15700 51100 21200 53000 27600 53000 c
34700 53000 40500 50600 45100 46000 c
49600 41300 51900 34900 51900 26700 c
51900 20000 50900 14700 48900 10900 c
46900 7100 43900 4100 40100 2000 c
36300 0 32100 -1100 27600 -1100 c
20300 -1100 14400 1200 10000 5800 c
5500 10400 3300 17100 3300 25900 c
12400 25900 m
12400 19300 13800 14300 16700 11000 c
19500 7700 23200 6100 27600 6100 c
32000 6100 35600 7700 38500 11000 c
41400 14300 42900 19400 42900 26200 c
42900 32600 41400 37400 38500 40800 c
35500 44100 31900 45800 27600 45800 c
23200 45800 19500 44100 16700 40800 c
13800 37500 12400 32500 12400 25900 c
f*
Q
} def
/hyphen {
333 0 32 215 302 303 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
3200 21500 27000 8800 re
f*
Q
} def
/v {
500 0 13 0 488 519 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
21000 0 m
1300 51900 l
10500 51900 l
21700 20800 l
22900 17400 24000 14000 25000 10400 c
25800 13100 26900 16400 28300 20200 c
39800 51900 l
48800 51900 l
29200 0 l
21000 0 l
f*
Q
} def
/p {
556 0 66 -198 516 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 -19800 m
6600 51900 l
14600 51900 l
14600 45100 l
16400 47700 18600 49700 21000 51000 c
23400 52300 26200 53000 29600 53000 c
34000 53000 37900 51800 41300 49600 c
44700 47300 47200 44100 49000 39900 c
50700 35700 51600 31200 51600 26300 c
51600 21000 50600 16200 48700 12000 c
46800 7700 44000 4400 40400 2200 c
36800 0 33000 -1100 29000 -1100 c
26000 -1100 23400 -500 21100 700 c
18700 1900 16800 3400 15400 5400 c
15400 -19800 l
6600 -19800 l
14600 25600 m
14600 18900 15900 14000 18600 10800 c
21300 7600 24600 6100 28400 6100 c
32300 6100 35600 7700 38400 11000 c
41200 14300 42600 19400 42600 26400 c
42600 33000 41200 37900 38500 41200 c
35800 44400 32600 46100 28800 46100 c
25000 46100 21700 44300 18900 40800 c
16000 37300 14600 32200 14600 25600 c
f*
Q
} def
/g {
556 0 32 -209 489 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
5000 -4200 m
13500 -5500 l
13900 -8100 14900 -10000 16500 -11200 c
18700 -12800 21600 -13700 25400 -13700 c
29400 -13700 32600 -12800 34800 -11200 c
37000 -9600 38600 -7300 39400 -4400 c
39800 -2600 40000 1100 40000 6800 c
36100 2200 31300 0 25600 0 c
18400 0 12900 2500 9000 7700 c
5100 12800 3200 19000 3200 26200 c
3200 31100 4100 35700 5900 39900 c
7700 44100 10300 47300 13700 49600 c
17100 51800 21100 53000 25700 53000 c
31800 53000 36800 50500 40800 45600 c
40800 51900 l
48900 51900 l
48900 7000 l
48900 -1000 48000 -6600 46400 -10000 c
44800 -13400 42200 -16000 38600 -18000 c
35000 -19900 30700 -20900 25500 -20900 c
19300 -20900 14300 -19500 10500 -16700 c
6700 -13900 4800 -9800 5000 -4200 c
12300 26900 m
12300 20100 13600 15100 16300 12000 c
19000 8800 22400 7300 26500 7300 c
30500 7300 33800 8800 36600 11900 c
39300 15000 40700 19900 40700 26600 c
40700 32900 39300 37700 36500 40900 c
33700 44100 30300 45800 26300 45800 c
22400 45800 19100 44200 16400 41000 c
13600 37800 12300 33100 12300 26900 c
f*
Q
} def
/c {
500 0 39 -11 491 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
40400 19000 m
49100 17900 l
48100 11900 45700 7200 41800 3900 c
37900 500 33100 -1100 27500 -1100 c
20300 -1100 14600 1200 10300 5800 c
6000 10400 3900 17000 3900 25700 c
3900 31300 4800 36200 6700 40400 c
8500 44600 11300 47700 15100 49800 c
18900 51900 23000 53000 27500 53000 c
33100 53000 37700 51500 41300 48700 c
44900 45900 47200 41800 48200 36600 c
39700 35300 l
38900 38700 37400 41300 35400 43100 c
33300 44900 30800 45800 27900 45800 c
23400 45800 19800 44200 17000 41000 c
14200 37800 12900 32800 12900 26000 c
12900 19000 14200 13900 16900 10800 c
19500 7600 23000 6100 27400 6100 c
30800 6100 33700 7100 36000 9200 c
38300 11300 39800 14600 40400 19000 c
f*
Q
} def
/l {
222 0 64 0 152 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6400 0 8800 71600 re
f*
Q
} def
/n {
556 0 66 0 487 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 0 m
6600 51900 l
14500 51900 l
14500 44500 l
18300 50100 23800 53000 31000 53000 c
34100 53000 37000 52400 39600 51300 c
42200 50200 44200 48700 45500 46900 c
46800 45100 47700 42900 48200 40400 c
48500 38800 48700 35900 48700 31900 c
48700 0 l
39900 0 l
39900 31500 l
39900 35100 39500 37700 38900 39500 c
38200 41300 37000 42700 35300 43800 c
33500 44800 31500 45400 29200 45400 c
25400 45400 22100 44200 19400 41800 c
16700 39400 15400 34900 15400 28300 c
15400 0 l
6600 0 l
f*
Q
} def
/f {
278 0 9 0 313 728 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
8700 0 m
8700 45000 l
900 45000 l
900 51900 l
8700 51900 l
8700 57400 l
8700 60800 9000 63400 9600 65100 c
10400 67400 11900 69300 14100 70700 c
16200 72100 19200 72800 23000 72800 c
25500 72800 28300 72500 31300 71900 c
29900 64300 l
28100 64500 26400 64700 24800 64700 c
22100 64700 20200 64100 19100 63000 c
17900 61800 17400 59700 17400 56600 c
17400 51900 l
27500 51900 l
27500 45000 l
17400 45000 l
17400 0 l
8700 0 l
f*
Q
} def
/P {
667 0 77 0 624 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
7700 0 m
7700 71600 l
34700 71600 l
39400 71600 43000 71300 45600 70900 c
49100 70300 52000 69100 54400 67500 c
56800 65900 58700 63600 60200 60600 c
61600 57600 62400 54400 62400 50900 c
62400 44700 60400 39600 56500 35400 c
52600 31200 45600 29100 35500 29100 c
17200 29100 l
17200 0 l
7700 0 l
17200 37500 m
35700 37500 l
41800 37500 46100 38600 48700 40900 c
51300 43200 52600 46400 52600 50600 c
52600 53600 51800 56100 50300 58300 c
48700 60400 46700 61800 44300 62500 c
42700 62900 39700 63100 35500 63100 c
17200 63100 l
17200 37500 l
f*
Q
} def
/m {
833 0 66 0 769 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 0 m
6600 51900 l
14500 51900 l
14500 44600 l
16100 47100 18200 49100 20900 50700 c
23600 52200 26700 53000 30200 53000 c
34000 53000 37100 52200 39600 50600 c
42000 49000 43800 46700 44800 43900 c
48900 49900 54200 53000 60800 53000 c
66000 53000 69900 51500 72700 48700 c
75500 45900 76900 41500 76900 35600 c
76900 0 l
68100 0 l
68100 32700 l
68100 36100 67800 38600 67200 40200 c
66600 41800 65600 43000 64100 44000 c
62600 44900 60900 45400 58900 45400 c
55200 45400 52200 44100 49800 41700 c
47400 39300 46200 35400 46200 30100 c
46200 0 l
37400 0 l
37400 33700 l
37400 37600 36600 40500 35200 42500 c
33800 44400 31400 45400 28200 45400 c
25700 45400 23400 44700 21300 43400 c
19200 42100 17700 40200 16800 37700 c
15800 35200 15400 31600 15400 26900 c
15400 0 l
6600 0 l
f*
Q
} def
/i {
222 0 66 0 154 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 61500 m
6600 71600 l
15400 71600 l
15400 61500 l
6600 61500 l
6600 0 m
6600 51900 l
15400 51900 l
15400 0 l
6600 0 l
f*
Q
} def
/seven {
556 0 47 0 511 707 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
4700 62200 m
4700 70700 l
51100 70700 l
51100 63800 l
46500 58900 41900 52400 37500 44400 c
33000 36400 29500 28100 27100 19700 c
25300 13700 24200 7100 23800 0 c
14700 0 l
14800 5600 15900 12400 18000 20400 c
20100 28400 23100 36100 27100 43500 c
31100 50900 35300 57100 39800 62200 c
4700 62200 l
f*
Q
} def
/multiply {
584 0 79 141 504 566 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
7900 20000 m
23200 35400 l
7900 50700 l
13900 56600 l
29200 41300 l
44500 56600 l
50300 50700 l
35100 35400 l
50400 20100 l
44500 14100 l
29200 29400 l
13800 14100 l
7900 20000 l
f*
Q
} def
/nine {
556 0 42 -11 512 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
5500 16600 m
13900 17300 l
14600 13300 16000 10500 18000 8700 c
20000 6900 22600 6000 25800 6000 c
28400 6000 30800 6600 32800 7800 c
34800 9000 36500 10700 37800 12800 c
39100 14800 40200 17600 41100 21200 c
42000 24700 42500 28300 42500 31900 c
42500 32300 42400 32900 42400 33700 c
40600 30900 38200 28600 35200 26900 c
32200 25100 28900 24300 25300 24300 c
19400 24300 14400 26400 10300 30700 c
6200 35000 4200 40700 4200 47700 c
4200 54900 6300 60800 10600 65200 c
14800 69600 20200 71900 26700 71900 c
31300 71900 35500 70600 39400 68100 c
43200 65600 46200 62000 48200 57400 c
50200 52700 51200 46000 51200 37300 c
51200 28100 50200 20800 48200 15400 c
46200 10000 43300 5900 39400 3100 c
35400 300 30800 -1100 25600 -1100 c
20000 -1100 15400 400 11800 3500 c
8200 6500 6100 10900 5500 16600 c
41500 48100 m
41500 53100 40100 57100 37400 60100 c
34700 63100 31500 64600 27700 64600 c
23800 64600 20400 63000 17500 59800 c
14600 56600 13200 52400 13200 47400 c
13200 42800 14500 39100 17300 36300 c
20000 33400 23400 32000 27500 32000 c
31500 32000 34900 33400 37500 36300 c
40100 39100 41500 43100 41500 48100 c
f*
Q
} def
/period {
278 0 91 0 191 100 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
9100 0 10000 10000 re
f*
Q
} def
/five {
556 0 42 -11 516 706 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
4200 18800 m
13400 19500 l
14000 15000 15600 11600 18100 9400 c
20600 7100 23600 6000 27100 6000 c
31300 6000 34900 7600 37900 10800 c
40800 14000 42300 18200 42300 23500 c
42300 28500 40800 32400 38000 35300 c
35200 38200 31500 39700 27000 39700 c
24200 39700 21600 39000 19300 37700 c
17000 36400 15200 34800 14000 32800 c
5700 33800 l
12600 70600 l
48200 70600 l
48200 62200 l
19700 62200 l
15800 43000 l
20100 46000 24600 47500 29300 47500 c
35500 47500 40800 45300 45100 41000 c
49400 36600 51600 31100 51600 24300 c
51600 17800 49700 12200 45900 7500 c
41300 1700 35100 -1100 27100 -1100 c
20600 -1100 15300 700 11200 4300 c
7000 7900 4700 12700 4200 18800 c
f*
Q
} def
/zero {
556 0 42 -11 508 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
4200 35300 m
4200 43700 5000 50500 6800 55700 c
8500 60900 11100 64900 14500 67700 c
17900 70500 22300 71900 27500 71900 c
31300 71900 34700 71100 37600 69500 c
40400 67900 42800 65700 44700 62800 c
46600 59900 48100 56400 49200 52200 c
50200 48000 50800 42300 50800 35300 c
50800 26900 49900 20100 48200 14900 c
46500 9700 43900 5800 40500 3000 c
37100 200 32700 -1100 27500 -1100 c
20500 -1100 15100 1300 11200 6200 c
6500 12100 4200 21800 4200 35300 c
13200 35300 m
13200 23500 14500 15700 17300 11800 c
20000 7900 23400 6000 27500 6000 c
31500 6000 34800 7900 37600 11800 c
40400 15700 41800 23500 41800 35300 c
41800 47100 40400 54900 37600 58800 c
34800 62600 31400 64600 27400 64600 c
23300 64600 20100 62900 17700 59500 c
14700 55100 13200 47000 13200 35300 c
f*
Q
} def
/s {
500 0 31 -11 461 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
3100 15500 m
11800 16800 l
12200 13300 13600 10600 15800 8800 c
18000 7000 21200 6100 25200 6100 c
29200 6100 32200 6900 34200 8500 c
36100 10100 37100 12100 37100 14300 c
37100 16300 36200 17800 34500 19000 c
33300 19800 30300 20800 25500 22000 c
19100 23600 14600 25000 12100 26200 c
9600 27400 7700 29000 6400 31100 c
5100 33200 4500 35500 4500 38100 c
4500 40400 5000 42500 6100 44500 c
7100 46500 8600 48100 10400 49400 c
11800 50400 13600 51200 16000 51900 c
18400 52600 20900 53000 23600 53000 c
27600 53000 31200 52400 34300 51200 c
37400 50000 39700 48500 41200 46500 c
42600 44500 43600 41800 44200 38500 c
35600 37300 l
35200 39900 34000 42000 32200 43500 c
30300 45000 27700 45800 24300 45800 c
20200 45800 17300 45100 15600 43800 c
13800 42400 13000 40900 13000 39100 c
13000 37900 13300 36900 14100 36000 c
14800 35000 15900 34300 17500 33700 c
18300 33300 20900 32600 25200 31400 c
31400 29800 35800 28400 38200 27400 c
40600 26300 42600 24700 44000 22700 c
45400 20700 46100 18200 46100 15200 c
46100 12200 45200 9500 43500 6900 c
41800 4300 39300 2400 36100 1000 c
32900 -400 29200 -1100 25200 -1100 c
18400 -1100 13300 200 9800 3000 c
6200 5800 4000 9900 3100 15500 c
f*
Q
} def
/d {
556 0 34 -11 484 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
40200 0 m
40200 6500 l
36900 1400 32100 -1100 25700 -1100 c
21500 -1100 17700 0 14300 2300 c
10800 4500 8100 7700 6200 11800 c
4300 15800 3400 20500 3400 25900 c
3400 31000 4200 35700 6000 39900 c
7700 44100 10300 47400 13700 49600 c
17100 51800 21000 53000 25300 53000 c
28400 53000 31200 52300 33700 51000 c
36100 49700 38100 48000 39600 45900 c
39600 71600 l
48400 71600 l
48400 0 l
40200 0 l
12500 25900 m
12500 19200 13800 14200 16600 11000 c
19400 7700 22700 6100 26600 6100 c
30400 6100 33600 7600 36300 10800 c
39000 13900 40400 18700 40400 25100 c
40400 32200 39000 37400 36300 40800 c
33500 44100 30200 45800 26200 45800 c
22200 45800 19000 44200 16400 41000 c
13800 37800 12500 32700 12500 25900 c
f*
Q
} def
/e {
556 0 37 -11 515 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
42100 16700 m
51200 15600 l
49700 10200 47000 6100 43200 3200 c
39300 300 34400 -1100 28400 -1100 c
20800 -1100 14700 1200 10300 5800 c
5900 10400 3700 17000 3700 25500 c
3700 34200 5900 41000 10400 45800 c
14800 50600 20700 53000 27900 53000 c
34800 53000 40500 50600 44900 45900 c
49300 41200 51500 34600 51500 26000 c
51500 25400 51400 24700 51400 23700 c
12700 23700 l
13000 17900 14600 13600 17500 10600 c
20400 7600 24000 6100 28400 6100 c
31600 6100 34400 6900 36700 8600 c
38900 10200 40700 12900 42100 16700 c
13200 30900 m
42200 30900 l
41800 35300 40700 38500 38900 40700 c
36100 44100 32400 45800 28000 45800 c
23900 45800 20500 44400 17800 41700 c
15000 39000 13500 35400 13200 30900 c
f*
Q
} def
/r {
333 0 65 0 347 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6500 0 m
6500 51900 l
14400 51900 l
14400 44000 l
16400 47600 18200 50000 20000 51200 c
21700 52400 23600 53000 25600 53000 c
28600 53000 31600 52000 34700 50200 c
31600 42000 l
29400 43200 27300 43900 25200 43900 c
23200 43900 21500 43300 20000 42200 c
18400 41000 17300 39400 16700 37400 c
15700 34200 15300 30800 15300 27100 c
15300 0 l
6500 0 l
f*
Q
} def
/h {
556 0 66 0 488 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
6600 0 m
6600 71600 l
15400 71600 l
15400 45900 l
19400 50600 24600 53000 30900 53000 c
34700 53000 38100 52200 40900 50700 c
43700 49200 45800 47100 47000 44500 c
48200 41800 48800 37900 48800 32900 c
48800 0 l
40000 0 l
40000 32900 l
40000 37300 39000 40500 37100 42500 c
35200 44500 32500 45500 29100 45500 c
26500 45500 24000 44800 21700 43400 c
19400 42000 17800 40200 16800 37900 c
15800 35600 15400 32400 15400 28400 c
15400 0 l
6600 0 l
f*
Q
} def
/t {
278 0 18 -6 271 700 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
25800 7900 m
27100 100 l
24500 -300 22300 -600 20400 -600 c
17200 -600 14700 -100 13000 800 c
11200 1800 10000 3100 9300 4800 c
8500 6400 8200 9900 8200 15200 c
8200 45000 l
1800 45000 l
1800 51900 l
8200 51900 l
8200 64700 l
16900 70000 l
16900 51900 l
25800 51900 l
25800 45000 l
16900 45000 l
16900 14700 l
16900 12100 17000 10500 17400 9800 c
17700 9100 18200 8500 18900 8100 c
19600 7700 20600 7500 21900 7500 c
22900 7500 24200 7600 25800 7900 c
f*
Q
} def
/space {
278 0 0 0 0 0 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
Q
} def
/x {
500 0 7 0 493 519 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
700 0 m
19700 27000 l
2100 51900 l
13100 51900 l
21100 39700 l
22500 37300 23700 35400 24700 33900 c
26100 36000 27500 37900 28700 39600 c
37400 51900 l
47900 51900 l
30000 27400 l
49300 0 l
38500 0 l
27800 16100 l
25000 20500 l
11400 0 l
700 0 l
f*
Q
} def
/a {
556 0 36 -11 514 530 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
40400 6400 m
37100 3600 34000 1600 31000 500 c
28000 -500 24700 -1100 21300 -1100 c
15600 -1100 11200 200 8200 3000 c
5100 5800 3600 9300 3600 13700 c
3600 16200 4100 18500 5300 20600 c
6500 22700 8000 24400 9900 25700 c
11700 26900 13800 27900 16200 28600 c
17900 29000 20500 29400 24000 29900 c
31100 30700 36300 31700 39700 32900 c
39700 34100 39700 34800 39700 35200 c
39700 38800 38900 41300 37300 42800 c
35000 44800 31600 45800 27200 45800 c
23000 45800 20000 45000 18000 43600 c
16000 42100 14600 39500 13700 35900 c
5100 37100 l
5900 40700 7200 43700 9000 46000 c
10800 48200 13300 50000 16700 51200 c
20100 52400 24000 53000 28500 53000 c
32900 53000 36500 52400 39300 51400 c
42100 50400 44100 49100 45400 47500 c
46700 45900 47600 44000 48100 41600 c
48400 40000 48600 37300 48600 33400 c
48600 21700 l
48600 13500 48700 8400 49100 6200 c
49500 4000 50200 2000 51400 0 c
42200 0 l
41200 1800 40600 3900 40400 6400 c
39700 26000 m
36500 24700 31700 23600 25300 22700 c
21700 22100 19100 21500 17600 20900 c
16100 20300 15000 19300 14200 18100 c
13400 16800 13000 15400 13000 13900 c
13000 11500 13800 9600 15600 8000 c
17400 6400 20000 5700 23400 5700 c
26800 5700 29800 6400 32400 7900 c
35000 9400 37000 11400 38300 14000 c
39200 16000 39700 18900 39700 22800 c
39700 26000 l
f*
Q
} def
/M {
833 0 74 0 757 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
7400 0 m
7400 71600 l
21700 71600 l
38600 20900 l
40200 16100 41300 12600 42000 10300 c
42800 12900 44100 16700 45800 21800 c
63000 71600 l
75700 71600 l
75700 0 l
66600 0 l
66600 59900 l
45800 0 l
37300 0 l
16600 60900 l
16600 0 l
7400 0 l
f*
Q
} def
/three {
556 0 42 -12 511 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
4200 18900 m
13000 20100 l
14000 15100 15700 11500 18100 9300 c
20500 7100 23500 6000 27000 6000 c
31100 6000 34600 7400 37400 10300 c
40200 13100 41700 16700 41700 20900 c
41700 24900 40300 28300 37700 30900 c
35100 33500 31700 34900 27700 34900 c
26000 34900 23900 34500 21500 33900 c
22500 41600 l
23100 41500 23500 41500 23900 41500 c
27600 41500 31000 42400 34000 44400 c
37000 46400 38500 49400 38500 53500 c
38500 56700 37400 59300 35200 61400 c
33000 63500 30200 64600 26800 64600 c
23400 64600 20500 63500 18200 61400 c
15900 59200 14500 56000 13900 51800 c
5100 53300 l
6100 59200 8600 63800 12400 67000 c
16200 70200 20900 71900 26600 71900 c
30500 71900 34100 71000 37400 69300 c
40600 67600 43100 65300 44900 62500 c
46700 59600 47600 56500 47600 53300 c
47600 50100 46700 47300 45100 44800 c
43400 42200 40900 40200 37700 38800 c
41900 37800 45100 35700 47500 32700 c
49900 29600 51100 25700 51100 21100 c
51100 14900 48800 9600 44200 5300 c
39600 900 33900 -1200 27000 -1200 c
20600 -1200 15400 600 11300 4400 c
7100 8100 4800 12900 4200 18900 c
f*
Q
} def
/six {
556 0 38 -11 510 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
49800 54100 m
41000 53400 l
40200 56800 39100 59300 37700 60900 c
35300 63300 32300 64600 28900 64600 c
26100 64600 23600 63800 21500 62300 c
18700 60300 16600 57300 15000 53500 c
13400 49600 12500 44100 12500 36900 c
14600 40100 17200 42400 20300 44000 c
23300 45600 26500 46400 29900 46400 c
35700 46400 40700 44200 44800 39900 c
48900 35600 51000 30000 51000 23200 c
51000 18700 50000 14500 48100 10700 c
46100 6800 43500 3900 40100 1900 c
36700 -100 32900 -1100 28600 -1100 c
21200 -1100 15300 1500 10700 6900 c
6100 12200 3800 21100 3800 33500 c
3800 47300 6300 57300 11400 63700 c
15800 69100 21800 71900 29400 71900 c
35000 71900 39700 70300 43300 67100 c
46900 63900 49000 59600 49800 54100 c
13900 23200 m
13900 20200 14500 17300 15800 14500 c
17000 11700 18800 9600 21200 8200 c
23500 6700 25900 6000 28500 6000 c
32100 6000 35300 7500 38000 10500 c
40600 13500 42000 17500 42000 22700 c
42000 27600 40600 31500 38000 34400 c
35400 37200 32100 38700 28100 38700 c
24100 38700 20800 37200 18000 34400 c
15200 31500 13900 27800 13900 23200 c
f*
Q
} def
/eight {
556 0 41 -11 512 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
17700 38800 m
14000 40100 11300 42000 9500 44500 c
7700 46900 6900 49900 6900 53400 c
6900 58600 8700 62900 12500 66500 c
16300 70100 21300 71900 27500 71900 c
33700 71900 38800 70000 42600 66400 c
46400 62800 48300 58400 48300 53200 c
48300 49800 47400 46900 45700 44500 c
43900 42000 41300 40100 37700 38800 c
42100 37400 45400 35100 47700 31900 c
50000 28700 51200 24900 51200 20500 c
51200 14300 49000 9200 44700 5100 c
40300 900 34600 -1100 27600 -1100 c
20500 -1100 14800 900 10500 5100 c
6200 9200 4100 14400 4100 20700 c
4100 25300 5200 29200 7600 32400 c
9900 35500 13300 37600 17700 38800 c
15900 53700 m
15900 50300 17000 47500 19200 45400 c
21400 43200 24200 42200 27700 42200 c
31100 42200 33800 43200 36000 45400 c
38200 47500 39300 50100 39300 53200 c
39300 56400 38100 59100 35900 61300 c
33700 63500 30900 64600 27600 64600 c
24200 64600 21400 63500 19200 61400 c
17000 59200 15900 56700 15900 53700 c
13100 20700 m
13100 18100 13700 15700 14900 13400 c
16100 11000 17800 9200 20200 7900 c
22500 6600 25000 6000 27700 6000 c
31900 6000 35300 7300 38100 10000 c
40800 12700 42200 16200 42200 20400 c
42200 24600 40800 28000 38000 30800 c
35200 33600 31600 35000 27400 35000 c
23200 35000 19800 33600 17100 30900 c
14400 28100 13100 24700 13100 20700 c
f*
Q
} def
/four {
556 0 13 0 508 716 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
32300 0 m
32300 17100 l
1300 17100 l
1300 25200 l
33900 71600 l
41100 71600 l
41100 25200 l
50800 25200 l
50800 17100 l
41100 17100 l
41100 0 l
32300 0 l
32300 25200 m
32300 57500 l
9900 25200 l
32300 25200 l
f*
Q
} def
/two {
556 0 29 0 503 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
50300 8400 m
50300 0 l
3000 0 l
2900 2100 3300 4100 4100 6100 c
5300 9300 7200 12400 9800 15600 c
12400 18700 16300 22300 21300 26500 c
29100 32800 34300 37800 37100 41600 c
39800 45300 41200 48800 41200 52200 c
41200 55600 39900 58600 37400 61000 c
34900 63400 31700 64600 27700 64600 c
23500 64600 20100 63300 17600 60800 c
15000 58200 13700 54700 13700 50200 c
4700 51200 l
5300 57900 7600 63000 11600 66600 c
15600 70100 21100 71900 27900 71900 c
34700 71900 40200 69900 44200 66100 c
48200 62300 50200 57600 50200 52000 c
50200 49100 49600 46300 48400 43500 c
47200 40700 45300 37800 42600 34800 c
39900 31700 35400 27500 29100 22200 c
23800 17800 20400 14800 18900 13200 c
17400 11600 16200 10000 15200 8400 c
50300 8400 l
f*
Q
} def
/one {
556 0 109 0 373 719 setcachedevice
q
[0.01 0 0 0.01 0 0] cm
37300 0 m
28500 0 l
28500 56000 l
26300 54000 23500 51900 20100 49900 c
16700 47900 13600 46400 10900 45400 c
10900 53900 l
15800 56200 20100 59000 23800 62300 c
27400 65500 30000 68700 31600 71900 c
37300 71900 l
37300 0 l
f*
Q
} def
end
currentdict end
/T3_9_0 exch definefont pop
%%EndResource
/F9_0 /T3_9_0 1 1
[ /space/hyphen/period/zero/one/two/three/four
  /five/six/seven/eight/nine/A/F/K
  /L/M/P/S/a/c/d/e
  /f/g/h/i/k/l/m/n
  /o/p/r/s/t/u/v/x
  /multiply/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 921 315 re
W
q
q
[1 0 0 1 -52 -17] cm
q
[1 0 0 1 0 0] cm
0 0 1080 360 re
W
q
[0.1 0 0 0.1 0 0] cm
/DeviceGray {} cs
[1] sc
0 0 10800 3600 re
f
1350 450 8370 2718 re
f
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1730.45 450 m
1730.45 3168 l
S
Q
/DeviceGray {} cs
[0.1499] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 170.264 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1975.91 450 m
1975.91 3168 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 194.81 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\005)
[5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
2466.82 450 m
2466.82 3168 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 243.901 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\007)
[5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
3448.64 450 m
3448.64 3168 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 342.082 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\013)
[5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
5412.27 450 m
5412.27 3168 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 535.665 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.131836 TJm
(\011)
[5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
9339.55 450 m
9339.55 3168 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 928.392 30.8438] Tm
0 0 Td
/F9_0 10 Tf
(\006)
[5.56
0] Tj
-0.136719 TJm
(\005)
[5.56
0] Tj
-402.408 -13.1406 Td
(\021\024)
[8.33
0
5.56
0] Tj
-0.170898 TJm
('\000)
[5
0
2.78
0] Tj
0.185547 TJm
($)
[2.78
0] Tj
0.146484 TJm
(\032)
[5.56
0] Tj
-0.131836 TJm
("\027)
[3.33
0
5.56
0] Tj
-0.170898 TJm
(\024)
[5.56
0] Tj
-0.131836 TJm
(\026)
[5.56
0] Tj
-0.170898 TJm
(#)
[5
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 450 m
9720 450 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 112 39.5789] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\003)
[5.56
0] Tj
11.2973 6.96953 Td
/F9_0 7 Tf
(\010)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 552.688 m
9720 552.688 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 66 49.8477] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\002)
[2.78
0] Tj
0.187378 TJm
(\005)
[5.56
0] Tj
-0.172119 TJm
(\010)
[5.56
0] Tj
-0.133057 TJm
(\013)
[5.56
0] Tj
-0.172119 TJm
(\014)
[5.56
0] Tj
-0.133057 TJm
(\006)
[5.56
0] Tj
-166.774 TJm
(\()
[5.84
0] Tj
-166.586 TJm
(\004)
[5.56
0] Tj
-0.133057 TJm
(\003)
[5.56
0] Tj
56.6168 6.96953 Td
/F9_0 7 Tf
(\010)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 655.371 m
9720 655.371 l
S
1350 758.059 m
9720 758.059 l
S
1350 860.746 m
9720 860.746 l
S
1350 963.43 m
9720 963.43 l
S
1350 1066.12 m
9720 1066.12 l
S
1350 1168.8 m
9720 1168.8 l
S
1350 1271.49 m
9720 1271.49 l
S
1350 1374.18 m
9720 1374.18 l
S
1350 1476.86 m
9720 1476.86 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 112 142.678] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\003)
[5.56
0] Tj
11.2973 6.96953 Td
/F9_0 7 Tf
(\011)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 1579.55 m
9720 1579.55 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 66 152.946] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\002)
[2.78
0] Tj
0.187378 TJm
(\005)
[5.56
0] Tj
-0.172119 TJm
(\010)
[5.56
0] Tj
-0.133057 TJm
(\013)
[5.56
0] Tj
-0.172119 TJm
(\014)
[5.56
0] Tj
-0.133057 TJm
(\006)
[5.56
0] Tj
-166.774 TJm
(\()
[5.84
0] Tj
-166.586 TJm
(\004)
[5.56
0] Tj
-0.133057 TJm
(\003)
[5.56
0] Tj
56.6168 6.96914 Td
/F9_0 7 Tf
(\011)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 1682.23 m
9720 1682.23 l
S
1350 1784.92 m
9720 1784.92 l
S
1350 1887.61 m
9720 1887.61 l
S
1350 1990.29 m
9720 1990.29 l
S
1350 2092.98 m
9720 2092.98 l
S
1350 2195.66 m
9720 2195.66 l
S
1350 2298.35 m
9720 2298.35 l
S
1350 2401.04 m
9720 2401.04 l
S
1350 2503.72 m
9720 2503.72 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 112 244.952] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\003)
[5.56
0] Tj
11.2973 6.96914 Td
/F9_0 7 Tf
(\012)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 2606.41 m
9720 2606.41 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 66 255.22] Tm
0 0 Td
/F9_0 10 Tf
(\004)
[5.56
0] Tj
-0.172119 TJm
(\002)
[2.78
0] Tj
0.187378 TJm
(\005)
[5.56
0] Tj
-0.172119 TJm
(\010)
[5.56
0] Tj
-0.133057 TJm
(\013)
[5.56
0] Tj
-0.172119 TJm
(\014)
[5.56
0] Tj
-0.133057 TJm
(\006)
[5.56
0] Tj
-166.774 TJm
(\()
[5.84
0] Tj
-166.586 TJm
(\004)
[5.56
0] Tj
-0.133057 TJm
(\003)
[5.56
0] Tj
56.6168 6.96953 Td
/F9_0 7 Tf
(\012)
[3.892
0] Tj
Q
q
1350 450 8370 2718 re
W
8 w
1 J
1 j
/DeviceGray {} CS
[0.8008] SC
1350 2709.09 m
9720 2709.09 l
S
1350 2811.78 m
9720 2811.78 l
S
1350 2914.47 m
9720 2914.47 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 60.0156 171.455] Tm
0 0 Td
/F9_0 10 Tf
($)
[2.78
0] Tj
0.187988 TJm
(\033)
[2.22
0] Tj
-0.187988 TJm
(\036\027)
[8.33
0
5.56
0] Tj
Q
q
1350 450 8370 2718 re
W
15 w
1 J
1 j
/DeviceRGB {} CS
[0.004 0.4509 0.6973] SC
1730.45 1556.92 m
1730.45 1626.19 l
S
1975.91 1281.22 m
1975.91 1331.6 l
S
2466.82 1064.52 m
2466.82 1112.71 l
S
2957.73 996.781 m
2957.73 1067.84 l
S
3448.64 888.637 m
3448.64 943.504 l
S
3939.55 920.008 m
3939.55 994.559 l
S
4430.45 827.773 m
4430.45 862.898 l
S
4921.36 830.094 m
4921.36 911.668 l
S
5412.27 835.23 m
5412.27 891.539 l
S
5903.18 841.652 m
5903.18 906.652 l
S
6394.09 826.445 m
6394.09 890.68 l
S
6885 800.738 m
6885 847.508 l
S
7375.91 786.844 m
7375.91 828.301 l
S
7866.82 829.871 m
7866.82 886.395 l
S
8357.73 873.758 m
8357.73 950.375 l
S
8848.64 873.043 m
8848.64 920.625 l
S
9339.55 849.117 m
9339.55 894.754 l
S
/DeviceRGB {} CS
[0.8711 0.5605 0.02] SC
1730.45 1769.08 m
1730.45 1863.53 l
S
1975.91 1804.63 m
1975.91 1908.04 l
S
2466.82 1767.91 m
2466.82 1808.38 l
S
2957.73 1716.63 m
2957.73 1782.02 l
S
3448.64 1673.12 m
3448.64 1750.96 l
S
3939.55 1663.4 m
3939.55 1737.69 l
S
4430.45 1615.36 m
4430.45 1673.27 l
S
4921.36 1605.91 m
4921.36 1675.43 l
S
5412.27 1549.34 m
5412.27 1601.52 l
S
5903.18 1491.77 m
5903.18 1535.16 l
S
6394.09 1465.83 m
6394.09 1524.22 l
S
6885 1460.91 m
6885 1493.55 l
S
7375.91 1425.46 m
7375.91 1466.45 l
S
7866.82 1435.22 m
7866.82 1504.39 l
S
8357.73 1397.38 m
8357.73 1466.16 l
S
8848.64 1381.1 m
8848.64 1421.98 l
S
9339.55 1388.27 m
9339.55 1444.64 l
S
/DeviceRGB {} CS
[0.008 0.6191 0.4509] SC
1730.45 2254.84 m
1730.45 2281.52 l
S
1975.91 2174.44 m
1975.91 2193.34 l
S
2466.82 2098.02 m
2466.82 2135.75 l
S
2957.73 2064.32 m
2957.73 2084.05 l
S
3448.64 2091.21 m
3448.64 2119.88 l
S
3939.55 2070.41 m
3939.55 2095.86 l
S
4430.45 2067.07 m
4430.45 2094.18 l
S
4921.36 2053.53 m
4921.36 2073.76 l
S
5412.27 2114.75 m
5412.27 2145.62 l
S
5903.18 2102.45 m
5903.18 2133.13 l
S
6394.09 2085.32 m
6394.09 2116.3 l
S
6885 2053.48 m
6885 2085.28 l
S
7375.91 2075.41 m
7375.91 2102.44 l
S
7866.82 2042.77 m
7866.82 2067.2 l
S
8357.73 2057.48 m
8357.73 2075.39 l
S
8848.64 2073.23 m
8848.64 2097.97 l
S
9339.55 2061.18 m
9339.55 2085.6 l
S
/DeviceRGB {} CS
[0.8359 0.3689 0] SC
1730.45 2571.25 m
1730.45 2589.23 l
S
1975.91 2536.03 m
1975.91 2554.82 l
S
2466.82 2519.65 m
2466.82 2533.58 l
S
2957.73 2598.32 m
2957.73 3006.14 l
S
3448.64 2448.39 m
3448.64 2547.89 l
S
3939.55 2346.27 m
3939.55 2469.36 l
S
4430.45 2401.32 m
4430.45 2508.26 l
S
4921.36 2401.18 m
4921.36 2426.39 l
S
5412.27 2309.28 m
5412.27 2450.42 l
S
5903.18 2314.21 m
5903.18 2429.97 l
S
6394.09 2375.26 m
6394.09 2401.14 l
S
6885 2382.88 m
6885 2966.19 l
S
7375.91 2295.76 m
7375.91 2296.89 l
S
7866.82 2294.36 m
7866.82 2408.55 l
S
8357.73 2354.79 m
8357.73 2912.22 l
S
8848.64 2455.86 m
8848.64 3054.61 l
S
9339.55 2302.73 m
9339.55 2314.51 l
S
/DeviceRGB {} CS
[0.8008 0.4709 0.7363] SC
1730.45 2332.38 m
1730.45 2368.9 l
S
1975.91 2232.46 m
1975.91 2269.31 l
S
2466.82 2164.02 m
2466.82 2190.86 l
S
2957.73 2118.14 m
2957.73 2152.81 l
S
3448.64 2092.84 m
3448.64 2131.29 l
S
3939.55 2059.58 m
3939.55 2109.04 l
S
4430.45 2010.89 m
4430.45 2048.14 l
S
4921.36 1993.59 m
4921.36 2032.63 l
S
5412.27 1966.15 m
5412.27 2005.99 l
S
5903.18 1949.5 m
5903.18 1985.93 l
S
6394.09 1918.51 m
6394.09 1953.27 l
S
6885 1931.57 m
6885 1993.14 l
S
7375.91 1913.81 m
7375.91 1965.78 l
S
7866.82 1863.85 m
7866.82 1894.18 l
S
8357.73 1870.92 m
8357.73 1919.95 l
S
8848.64 1838.68 m
8848.64 1881.99 l
S
9339.55 1843.73 m
9339.55 1899.63 l
S
/DeviceRGB {} CS
[0.004 0.4509 0.6973] SC
1730.45 1593.5 m
1975.91 1307 l
2466.82 1089.6 l
2957.73 1033.4 l
3448.64 917.578 l
3939.55 958.754 l
4430.45 845.164 l
4921.36 871.887 l
5412.27 862.977 l
5903.18 875.07 l
6394.09 857.609 l
6885 824.363 l
7375.91 808.828 l
7866.82 860.031 l
8357.73 914.387 l
8848.64 898.297 l
9339.55 873.086 l
S
/DeviceRGB {} CS
[0.8711 0.5605 0.02] SC
1730.45 1818.66 m
1975.91 1857.04 l
2466.82 1788.65 l
2957.73 1750.07 l
3448.64 1713.7 l
3939.55 1704.84 l
4430.45 1644.38 l
4921.36 1643.63 l
5412.27 1574.97 l
5903.18 1512.83 l
6394.09 1495.59 l
6885 1476.43 l
7375.91 1445.93 l
7866.82 1474 l
8357.73 1432.05 l
8848.64 1403.38 l
9339.55 1417.2 l
S
/DeviceRGB {} CS
[0.008 0.6191 0.4509] SC
1730.45 2267 m
1975.91 2184.2 l
2466.82 2115.31 l
2957.73 2074.59 l
3448.64 2106.34 l
3939.55 2083.69 l
4430.45 2080.77 l
4921.36 2063.21 l
5412.27 2130.86 l
5903.18 2118.24 l
6394.09 2100.56 l
6885 2070.05 l
7375.91 2089.18 l
7866.82 2055.01 l
8357.73 2066.47 l
8848.64 2085.71 l
9339.55 2073.51 l
S
/DeviceRGB {} CS
[0.8359 0.3689 0] SC
1730.45 2580.36 m
1975.91 2545.53 l
2466.82 2526.67 l
2957.73 2847.31 l
3448.64 2500.91 l
3939.55 2412.05 l
4430.45 2457.98 l
4921.36 2413.96 l
5412.27 2385.41 l
5903.18 2375.84 l
6394.09 2388.39 l
6885 2763.79 l
7375.91 2296.32 l
7866.82 2355.11 l
8357.73 2715.46 l
8848.64 2848.97 l
9339.55 2308.66 l
S
/DeviceRGB {} CS
[0.8008 0.4709 0.7363] SC
1730.45 2351.14 m
1975.91 2250.88 l
2466.82 2177.78 l
2957.73 2135.91 l
3448.64 2111.95 l
3939.55 2083.72 l
4430.45 2029.91 l
4921.36 2013.82 l
5412.27 1985.3 l
5903.18 1968.24 l
6394.09 1935.03 l
6885 1962.95 l
7375.91 1939.57 l
7866.82 1879.95 l
8357.73 1896.31 l
8848.64 1860.25 l
9339.55 1872.75 l
S
Q
8 w
2 J
/DeviceGray {} CS
[0.8008] SC
1350 450 m
1350 3168 l
S
9720 450 m
9720 3168 l
S
1350 450 m
9720 450 l
S
1350 3168 m
9720 3168 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 388.781 322.8] Tm
0 0 Td
/F9_0 12 Tf
(\022"\027)
[8.004
0
3.996
0
6.672
0] Tj
-0.152588 TJm
(\030)
[3.336
0] Tj
0.166829 TJm
(\027)
[6.672
0] Tj
-0.150553 TJm
("\027)
[3.996
0
6.672
0] Tj
-0.150553 TJm
(\037)
[6.672
0] Tj
-0.150553 TJm
($)
[3.336
0] Tj
0.166829 TJm
(\033)
[2.664
0] Tj
-0.166829 TJm
(\024)
[6.672
0] Tj
-0.150553 TJm
(\035)
[2.664
0] Tj
-0.166829 TJm
(\000)
[3.336
0] Tj
0.166829 TJm
(\024)
[6.672
0] Tj
-0.150553 TJm
($)
[3.336
0] Tj
0.166829 TJm
($)
[3.336
0] Tj
0.166829 TJm
(\024)
[6.672
0] Tj
-0.150553 TJm
(\025\032)
[6
0
6.672
0] Tj
-0.150553 TJm
(\036\027)
[9.996
0
6.672
0] Tj
-0.150553 TJm
(\037)
[6.672
0] Tj
-0.150553 TJm
($)
[3.336
0] Tj
0.166829 TJm
(\000)
[3.336
0] Tj
0.166829 TJm
(\004)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\000)
[3.336
0] Tj
0.166829 TJm
(\027)
[6.672
0] Tj
-0.150553 TJm
(\026)
[6.672
0] Tj
-0.150553 TJm
(\031)
[6.672
0] Tj
-0.150553 TJm
(\027)
[6.672
0] Tj
-0.150553 TJm
(#\000)
[6
0
3.336
0] Tj
0.166829 TJm
(!)
[6.672
0] Tj
-0.150553 TJm
(\027)
[6.672
0] Tj
-0.150553 TJm
("\000)
[3.996
0
3.336
0] Tj
0.166829 TJm
(&\027)
[6
0
6.672
0] Tj
-0.150553 TJm
("$)
[3.996
0
3.336
0] Tj
0.166829 TJm
(\033)
[2.664
0] Tj
-0.166829 TJm
(\025\027)
[6
0
6.672
0] Tj
-0.150553 TJm
(\000)
[3.336
0] Tj
0.166829 TJm
(\001\000)
[3.996
0
3.336
0] Tj
0.166829 TJm
(\004)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\003)
[6.672
0] Tj
-0.150553 TJm
(\000)
[3.336
0] Tj
0.166829 TJm
(\037)
[6.672
0] Tj
-0.150553 TJm
( )
[6.672
0] Tj
-0.150553 TJm
(\026)
[6.672
0] Tj
-0.150553 TJm
(\027)
[6.672
0] Tj
-0.150553 TJm
(#)
[6
0] Tj
Q
/DeviceGray {} cs
[1] sc
8746.56 2238.31 m
9650 2238.31 l
9663.33 2238.31 9670 2244.98 9670 2258.31 c
9670 3098 l
9670 3111.33 9663.33 3118 9650 3118 c
8746.56 3118 l
8733.23 3118 8726.56 3111.33 8726.56 3098 c
8726.56 2258.31 l
8726.56 2244.98 8733.23 2238.31 8746.56 2238.31 c
f
10 w
0 J
8746.56 2238.31 m
9650 2238.31 l
9663.33 2238.31 9670 2244.98 9670 2258.31 c
9670 3098 l
9670 3111.33 9663.33 3118 9650 3118 c
8746.56 3118 l
8733.23 3118 8726.56 3111.33 8726.56 3098 c
8726.56 2258.31 l
8726.56 2244.98 8733.23 2238.31 8746.56 2238.31 c
h
S
/DeviceGray {} cs
[0.1499] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 300.644] Tm
0 0 Td
/F9_0 10 Tf
(\015\035)
[6.67
0
2.22
0] Tj
-0.185547 TJm
(\031)
[5.56
0] Tj
-0.136719 TJm
( )
[5.56
0] Tj
-0.175781 TJm
("\033)
[3.33
0
2.22
0] Tj
-0.146484 TJm
($)
[2.78
0] Tj
0.146484 TJm
(\032)
[5.56
0] Tj
-0.136719 TJm
(\036)
[8.33
0] Tj
Q
15 w
1 J
1 j
/DeviceRGB {} CS
[0.004 0.4509 0.6973] SC
8766.56 2898.78 m
8966.56 2898.78 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 286.378] Tm
0 0 Td
/F9_0 10 Tf
(\016)
[6.11
0] Tj
0.136719 TJm
(\033)
[2.22
0] Tj
-0.146484 TJm
(\035)
[2.22
0] Tj
-0.185547 TJm
($)
[2.78
0] Tj
0.185547 TJm
(\027)
[5.56
0] Tj
-0.175781 TJm
("\000)
[3.33
0
2.78
0] Tj
0.185547 TJm
(\017"%)
[6.67
0
3.33
0
5.56
0] Tj
-0.175781 TJm
(#\034\024)
[5
0
5
0
5.56
0] Tj
-0.136719 TJm
(\035)
[2.22
0] Tj
Q
/DeviceRGB {} CS
[0.8711 0.5605 0.02] SC
8766.56 2757.38 m
8966.56 2757.38 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 272.238] Tm
0 0 Td
/F9_0 10 Tf
(\016)
[6.11
0] Tj
0.136719 TJm
(\033)
[2.22
0] Tj
-0.146484 TJm
(\035)
[2.22
0] Tj
-0.185547 TJm
($)
[2.78
0] Tj
0.185547 TJm
(\027)
[5.56
0] Tj
-0.175781 TJm
("\000)
[3.33
0
2.78
0] Tj
0.185547 TJm
(\023 )
[6.67
0
5.56
0] Tj
-0.175781 TJm
(\035)
[2.22
0] Tj
-0.146484 TJm
(\035)
[2.22
0] Tj
-0.185547 TJm
(\033)
[2.22
0] Tj
-0.146484 TJm
(\037)
[5.56
0] Tj
Q
/DeviceRGB {} CS
[0.008 0.6191 0.4509] SC
8766.56 2615.97 m
8966.56 2615.97 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 258.097] Tm
0 0 Td
/F9_0 10 Tf
(\017"%)
[6.67
0
3.33
0
5.56
0] Tj
-0.175781 TJm
(#\034\024)
[5
0
5
0
5.56
0] Tj
-0.136719 TJm
(\035)
[2.22
0] Tj
Q
/DeviceRGB {} CS
[0.8359 0.3689 0] SC
8766.56 2474.56 m
8966.56 2474.56 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 243.956] Tm
0 0 Td
/F9_0 10 Tf
(\023 )
[6.67
0
5.56
0] Tj
-0.175781 TJm
(\035)
[2.22
0] Tj
-0.146484 TJm
(\035)
[2.22
0] Tj
-0.185547 TJm
(\033)
[2.22
0] Tj
-0.146484 TJm
(\037)
[5.56
0] Tj
-0.175781 TJm
(\000)
[2.78
0] Tj
0.185547 TJm
(\015\020)
[6.67
0
5.56
0] Tj
Q
/DeviceRGB {} CS
[0.8008 0.4709 0.7363] SC
8766.56 2333.16 m
8966.56 2333.16 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 904.656 229.816] Tm
0 0 Td
/F9_0 10 Tf
(\023 )
[6.67
0
5.56
0] Tj
-0.175781 TJm
(\035)
[2.22
0] Tj
-0.146484 TJm
(\035)
[2.22
0] Tj
-0.185547 TJm
(\033)
[2.22
0] Tj
-0.146484 TJm
(\037)
[5.56
0] Tj
-0.175781 TJm
(\000)
[2.78
0] Tj
0.185547 TJm
(\016)
[6.11
0] Tj
0.136719 TJm
(\015\020)
[6.67
0
5.56
0] Tj
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_9_0
%%EOF
